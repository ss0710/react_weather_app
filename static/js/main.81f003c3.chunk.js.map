{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","Time","setTime","date","String","window","Date","slice","useEffect","interval","setInterval","toLocaleTimeString","clearInterval","className","main","temp","type","placeholder","value","onChange","e","target","onKeyPress","event","key","fetch","then","res","json","result","cod","swal","name","sys","country","humidity","pressure","coord","lon","lat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kMAEMA,EACC,mCADDA,EAEE,2CA6EOC,MA1Ef,WAAgB,IAAD,EAEYC,mBAAS,IAFrB,mBAEPC,EAFO,KAEAC,EAFA,OAGgBF,mBAAS,IAHzB,mBAGPG,EAHO,KAGEC,EAHF,OAIQJ,mBAAS,OAJjB,gCAuBQA,mBAAS,IAvBjB,mBAuBRK,EAvBQ,KAuBHC,EAvBG,KAyBTC,EAAOC,OAAO,IAAIC,OAAOC,MAU7B,OATAH,EAAOA,EAAKI,MAAM,EAAE,IAEpBC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BR,GAAQ,SAAAD,GAAI,OAAI,IAAIK,MAAOK,0BAC1B,KACH,OAAO,kBAAMC,cAAcH,MAC1B,IAGD,yBAAKI,UAAmC,oBAAhBd,EAAQe,KAAyBf,EAAQe,KAAKC,KAAO,GAAM,WAAchB,EAAQe,KAAKC,KAAO,IAAOhB,EAAQe,KAAKC,KAAM,GAAO,aAAa,aAAgB,OAClL,8BACE,yBAAKF,UAAU,cACd,2BAAOG,KAAK,OAAOC,YAAY,YAAYJ,UAAU,SAASK,MAAOrB,EAAOsB,SAAU,SAAAC,GAAC,OAAItB,EAASsB,EAAEC,OAAOH,QAAQI,WAjC5G,SAACC,GACG,UAAdA,EAAMC,KACPC,MAAM,GAAD,OAAI/B,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDgC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ7B,EAAW6B,GACX/B,EAAS,IACS,QAAf+B,EAAOC,KAETC,IAAK,YAAY,iBAAiB,gBA0BpC,yBAAKlB,UAAU,WAAU,iDACzB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,QACf,4BAAKV,IAEL,yBAAKU,UAAU,QACd,4BAAKZ,KAGiB,oBAAhBF,EAAQe,KACjB,6BACA,yBAAKD,UAAU,YACZ,4BAAKd,EAAQiC,KAAb,IAAoBjC,EAAQkC,IAAIC,UAEnC,yBAAKrB,UAAU,gBACb,yBAAKA,UAAU,QACbd,EAAQe,KAAKC,KADf,SAGA,yBAAKF,UAAU,WAAf,cACad,EAAQe,KAAKqB,SAAS,6BADnC,cAEapC,EAAQe,KAAKsB,SAAS,6BAFnC,eAGa,6BAHb,OAIMrC,EAAQsC,MAAMC,IAAI,6BAJxB,OAKMvC,EAAQsC,MAAME,IAAI,gCAItB,MC/DSC,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.81f003c3.chunk.js","sourcesContent":["import React,{ useState, useEffect } from 'react';\nimport swal from 'sweetalert';\nconst api = {\n  key: \"382b9c6030f2b9e7f04f51413429479a\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const[query, setQuery] = useState('');\n  const[weather, setWeather] = useState({});\n  const[cls, setCls] = useState('app');\n\n  const search = (event) => {\n    if(event.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setQuery('');\n        if(result.cod === '404')\n        {\n         swal(\"error 404\",\"city not found\",\"error\");\n        }\n      })\n    }\n  }\n\n  \n\n  var [Time,setTime] = useState(0);\n\n  let date = String(new window.Date());\n  date = date.slice(3,15);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(Time => new Date().toLocaleTimeString())\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 30) ? 'app-warm' :((weather.main.temp < 31) &&(weather.main.temp >10)) ? 'app-normal':'app-winter') : 'app'}>\n     <main>\n       <div className=\"search-box\">\n        <input type=\"text\" placeholder=\"Search...\" className=\"search\" value={query} onChange={e => setQuery(e.target.value)} onKeyPress={search}></input>\n       </div>\n       <div className=\"heading\"><h2>Search Your City</h2></div>\n       <div className=\"imfo\">\n         <div className=\"date\">\n         <h3>{date}</h3>\n         </div>\n         <div className=\"time\">\n          <h4>{Time}</h4>\n         </div>\n       </div>\n       {(typeof weather.main != \"undefined\") ? (\n       <div>\n       <div className=\"location\">\n          <h2>{weather.name},{weather.sys.country}</h2>\n         </div>\n       <div className=\"weather-imfo\">\n         <div className=\"temp\">\n          {weather.main.temp}Â°C\n         </div>\n         <div className=\"weather\">\n          Humidity = {weather.main.humidity}<br/>\n          Pressure = {weather.main.pressure}<br/>\n          Co-ordinates<br/>\n          lon:{weather.coord.lon}<br/>\n          lat:{weather.coord.lat}<br/>\n         </div>\n       </div>\n       </div>\n       ): ('')}\n     </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}